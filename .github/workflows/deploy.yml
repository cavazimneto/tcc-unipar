name: Deploy

on:
  release:
    types: [published]

jobs:
  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Version
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}
            ghcr.io/${{ github.repository }}:latest

  deploy-staging:
    needs: publish
    name: Deploy On Staging
    if: "github.event.release.prerelease"
    runs-on: ubuntu-latest
    env:
      PORT: 4000
      ENV: nonprod
      DNS: customer.staging.capitual.com
      PROJECT_ID: capitual-v2
      CLUSTER_ZONE: us-central1
      CLUSTER_NAME: gke-cluster-nonprod
      ISSUER: letsencrypt-nonprod
    steps:
      - name: Checkout Version
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_NONPROD_SERVICE_ACCOUNT }}
          export_default_credentials: true

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          location: ${{ env.CLUSTER_ZONE }}
          cluster_name: ${{ env.CLUSTER_NAME }}
          credentials: ${{ secrets.GKE_NONPROD_SERVICE_ACCOUNT }}

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Replace k8s deployment
        uses: falnyr/replace-env-vars-action@v1.3.1
        env:
          ENV: ${{ env.ENV }}
          PORT: ${{ env.PORT }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}
        with:
          filename: k8s/deployment.yaml

      - name: Replace k8s service
        uses: falnyr/replace-env-vars-action@v1.3.1
        env:
          DNS: ${{ env.DNS }}
          PORT: ${{ env.PORT }}
          ISSUER: ${{ env.ISSUER }}
        with:
          filename: k8s/service.yaml

      - name: Replace CAPSVR Token
        run: |-
          cat > k8s/variables.yaml <<EOF
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: customer-bff-microservice-configmap
          data:
            APP_PORT: "__PORT__"
            APP_ENV: "__ENV__"
            INTERVENT_SIMULATE: "__INTERVENT_SIMULATE__"
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: customer-bff-microservice-secret
          type: Opaque
          stringData:
            CAPSVR_TOKEN: "${{ secrets.CAPSVR_TOKEN }}"
            NEW_RELIC_APP_NAME: "__NEW_RELIC_APP_NAME__"
            NEW_RELIC_LICENSE_KEY: "__NEW_RELIC_LICENSE_KEY__"
          EOF

      - name: Replace k8s variables
        uses: falnyr/replace-env-vars-action@v1.3.1
        env:
          APP_PORT: ${{ env.PORT }}
          APP_ENV: ${{ env.ENV }}
          INTERVENT_SIMULATE: "true"
          NEW_RELIC_APP_NAME: "${{ secrets.CUSTOMER_BFF_NEWRELIC_NAME_NONPROD }}"
          NEW_RELIC_LICENSE_KEY: "${{ secrets.CUSTOMER_BFF_NEWRELIC_LICENSE_NONPROD }}"
        with:
          filename: k8s/variables.yaml

      - name: Apply k8s files
        run: |-
          kubectl apply -f k8s/

  deploy-production:
    needs: publish
    name: Deploy On Production
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    env:
      PORT: 4000
      ENV: prod
      DNS: customer.capitual.com
      PROJECT_ID: capitual-v2
      CLUSTER_ZONE: us-central1
      CLUSTER_NAME: gke-cluster-prod
      ISSUER: letsencrypt-prod
      NEW_RELIC_APP_NAME: "${{ secrets.CUSTOMER_BFF_NEWRELIC_NAME_PROD }}"
      NEW_RELIC_LICENSE_KEY: "${{ secrets.CUSTOMER_BFF_NEWRELIC_LICENSE_PROD }}"
    steps:
      - name: Checkout Version
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_PROD_SERVICE_ACCOUNT }}
          export_default_credentials: true

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          location: ${{ env.CLUSTER_ZONE }}
          cluster_name: ${{ env.CLUSTER_NAME }}
          credentials: ${{ secrets.GKE_PROD_SERVICE_ACCOUNT }}

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Replace k8s deployment
        uses: falnyr/replace-env-vars-action@v1.3.1
        env:
          ENV: ${{ env.ENV }}
          PORT: ${{ env.PORT }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}
        with:
          filename: k8s/deployment.yaml

      - name: Replace k8s service
        uses: falnyr/replace-env-vars-action@v1.3.1
        env:
          DNS: ${{ env.DNS }}
          PORT: ${{ env.PORT }}
          ISSUER: ${{ env.ISSUER }}
        with:
          filename: k8s/service.yaml

      - name: Replace CAPSVR Token
        run: |-
          cat > k8s/variables.yaml <<EOF
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: customer-bff-microservice-configmap
          data:
            APP_PORT: "__PORT__"
            APP_ENV: "__ENV__"
            INTERVENT_SIMULATE: "__INTERVENT_SIMULATE__"
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: customer-bff-microservice-secret
          type: Opaque
          stringData:
            CAPSVR_TOKEN: "${{ secrets.CAPSVR_TOKEN }}"
            NEW_RELIC_APP_NAME: "__NEW_RELIC_APP_NAME__"
            NEW_RELIC_LICENSE_KEY: "__NEW_RELIC_LICENSE_KEY__"
          EOF

      - name: Replace k8s variables
        uses: falnyr/replace-env-vars-action@v1.3.1
        env:
          APP_PORT: ${{ env.PORT }}
          APP_ENV: ${{ env.ENV }}
          INTERVENT_SIMULATE: "false"
          NEW_RELIC_APP_NAME: "${{ secrets.CUSTOMER_BFF_NEWRELIC_NAME_PROD }}"
          NEW_RELIC_LICENSE_KEY: "${{ secrets.CUSTOMER_BFF_NEWRELIC_LICENSE_PROD }}"
        with:
          filename: k8s/variables.yaml

      - name: Apply k8s files
        run: |-
          kubectl apply -f k8s/
